#ug project code
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
train = pd.read_csv('../input/students-adaptability-level-in-online-education/students_adaptability_level_online_education.csv')
train.info()
train.isnull().sum()
train.describe()
data.replace("Boy","Male",inplace=True)
data.replace("Girl","Female",inplace=True)
data.replace("Mid","Middle",inplace=True)
data.replace("Poor","Lower",inplace=True)
data.replace("Rich","Upper",inplace=True)
random.shuffle(colors)
plt.figure(figsize=(15,10))
plt.subplot(2,2,1)
un, count = np.unique(data[data.Gender == "Male"]["Adaptivity Level"].values,return_counts=True)
plt.bar(un, count, color=colors)
plt.title("Adaptivity Level for Males")
plt.xlabel("Adaptivity Level")
plt.ylabel("Count")
plt.subplot(2,2,2)
un, count = np.unique(data[data.Gender == "Female"]["Adaptivity Level"].values,return_counts=True)
plt.bar(un, count, color=colors)
plt.title("Adaptivity Level for Females")
plt.xlabel("Adaptivity Level")
plt.ylabel("Count")

plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(15,10))
graphs = 1
for i in np.unique(data.Age.values):
    plt.subplot(2,3,graphs)
    un, count = np.unique(data[data.Age == i]["Adaptivity Level"].values, return_counts=True)
    count, un = zip(*sorted(zip(count, un), reverse=True))
    plt.bar(un, count, color = colors)
    plt.title("Adaptivity Level for Age group " + i)
    plt.xlabel("Age group")
    plt.ylabel("Count")
    graphs = graphs + 1
plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(15,10))
graphs = 1
for i in np.unique(data["Education Level"].values):
    plt.subplot(2,3,graphs)
    un, count = np.unique(data[data["Education Level"] == i]["Adaptivity Level"].values, return_counts=True)
    count, un = zip(*sorted(zip(count, un), reverse=True))
    plt.bar(un, count, color = colors)
    plt.title("Adaptivity Level for " + i)
    plt.xlabel("Adaptivity Level")
    plt.ylabel("Count")
    graphs = graphs + 1
plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(20,10))
graphs = 1
for i in np.unique(data["Institution Type"].values):
    plt.subplot(2,3,graphs)
    un, count = np.unique(data[data["Institution Type"] == i]["Adaptivity Level"].values, return_counts=True)
    count, un = zip(*sorted(zip(count, un), reverse=True))
    plt.bar(un, count, color = colors)
    plt.title("Adaptivity Level for " + i + " Institution")
    plt.xlabel("Adaptivity Level")
    plt.ylabel("Count")
    graphs = graphs + 1
plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(20,10))
graphs = 1
for i in np.unique(data["IT Student"].values):
    plt.subplot(2,3,graphs)
    un, count = np.unique(data[data["IT Student"] == i]["Adaptivity Level"].values, return_counts=True)
    count, un = zip(*sorted(zip(count, un), reverse=True))
    plt.bar(un, count, color = colors)
    plt.title("Is IT Student? : " + i)
    plt.xlabel("Adaptivity Level")
    plt.ylabel("Count")
    graphs = graphs + 1
plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(20,10))
graphs = 1
for i in np.unique(data["Location"].values):
    plt.subplot(2,3,graphs)
    un, count = np.unique(data[data["Location"] == i]["Adaptivity Level"].values, return_counts=True)
    count, un = zip(*sorted(zip(count, un), reverse=True))
    plt.bar(un, count, color = colors)
    plt.title("Is student in Location? : " + i)
    plt.xlabel("Adaptivity Level")
    plt.ylabel("Count")
    graphs = graphs + 1
plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(20,10))
graphs = 1
for i in np.unique(data["Load-shedding"].values):
    plt.subplot(2,3,graphs)
    un, count = np.unique(data[data["Load-shedding"] == i]["Adaptivity Level"].values, return_counts=True)
    count, un = zip(*sorted(zip(count, un), reverse=True))
    plt.bar(un, count, color = colors)
    plt.title("Load shedding frequency? : " + i)
    plt.xlabel("Adaptivity Level")
    plt.ylabel("Count")
    graphs = graphs + 1
plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(20,10))
graphs = 1
for i in np.unique(data["Financial Condition"].values):
    plt.subplot(2,3,graphs)
    un, count = np.unique(data[data["Financial Condition"] == i]["Adaptivity Level"].values, return_counts=True)
    count, un = zip(*sorted(zip(count, un), reverse=True))
    plt.bar(un, count, color = colors)
    plt.title("Financial Condition : " + i)
    plt.xlabel("Adaptivity Level")
    plt.ylabel("Count")
    graphs = graphs + 1
plt.tight_layout()
random.shuffle(colors)
plt.figure(figsize=(20,10))
graphs = 1
for i in np.unique(data["Internet Type"].values):


